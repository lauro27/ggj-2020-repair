<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle_r</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create variables

hsp = 4
vsp = 0
grav = 0.7
energy = 100
jumpspeed = 8
inventory1 = M_NONE
inventory2 = M_NONE

battery = 9000
can_move = true
facing_right = true

done = 0

allslots = ds_list_create()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move player and interact

scr_detect_input()
if (can_move){
    nextx = (right_key - left_key) * hsp 
    xcol = (right_key - left_key)
    if (xcol = -1){facing_right = false}
    else if (xcol = 1){facing_right = true}
    if(place_meeting(x,y+1,obj_rthread)) 
    {
        nextx = hsp*3  
        xcol = 1 
    }
    if(place_meeting(x,y+1,obj_lthread)) 
    {
        nextx = -hsp*3  
        xcol = -1
    }
    if(place_meeting(x,y+1,obj_move))
    {
        var this_one = instance_place(x,y+1,obj_move);
        nextx += -this_one.left * this_one.spd
        xcol += -this_one.left
    }
    if(place_meeting(x,y+1,obj_elevator))
    {
        var that_one = instance_place(x,y+1,obj_elevator);
        y = that_one.y-1
    }
    if(!place_meeting(x+nextx, y, obj_solid))
    {
        x += nextx
    }
    else if(!place_meeting(x+xcol, y, obj_solid))
    {
        x += xcol
    }
    
    //gravity (and then implement jump)
    
    if(place_meeting(x,y+1,obj_solid)) 
    {
        if (jump_key)
        {
            vsp = -jumpspeed
            image_index = 0
            audio_play_sound(snd_jump,0,false)
        }
    }
    floor_id = instance_place(x,y+vsp+1,obj_solid)
        
    if(floor_id != noone)
    {
        if (vsp&gt;=0)
        {
            y= floor_id.y-floor_id.sprite_height
            if (vsp &gt; 0) {audio_play_sound(snd_bup,0,false)}
        }
        else
        {
            y= floor_id.y+floor_id.sprite_height
        }
        vsp = 0
    }
    else if (vsp&lt;16){vsp += grav}
    
    y += vsp
    
}



if (battery &lt;=0)
{
    can_move = false
    image_index = 0
    if (done&gt;= 90)
    {
    room_restart()
    }else{done++}
    
}
else
{
    battery--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="116">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_search_slots</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>battery = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_sprite(spr_battery,0,10,10)

draw_set_color(c_black)
draw_text(20,20,"BATTERY:" + string(floor(battery/30)))

/*if(battery &lt;=3600)
{
    bar = battery -3600;
    percent = ((bar * 100)/1800)/100;
    draw_text(500,0,percent);
    draw_sprite_general(spr_bar,0,0,0,sprite_get_width(spr_bar),sprite_get_height(spr_bar),x+23,y+13,1,percent,0,0,0,0,0,0)
}*/


draw_sprite(spr_inventory,0,room_width-128,0)
draw_sprite(spr_inventory,0,room_width-64,0)

draw_sprite_ext(spr_slot,inventory1,room_width-96,32,.5,.5,0,c_white,1)
draw_sprite_ext(spr_slot,inventory2,room_width-32,32,.5,.5,0,c_white,1)

if (battery &lt;= 0)
{
    draw_set_alpha(done/90)
    draw_rectangle_colour(0,0,room_width,room_height,c_black,c_black,c_black,c_black,false)
    draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
image_speed = 10
    
scr_detect_input()

/*walk or not*/
if(left_key or right_key)
{
    if(facing_right){sprite_index = spr_player_walk_r}
    else{sprite_index = spr_player_walk_l}
    image_speed = 10
    if (image_index == image_number-1)
    {
        image_speed = 0
    }
}
 else
{
    if(facing_right){sprite_index = spr_player_idle_r}
    else{sprite_index = spr_player_idle_l}
    image_speed = 10
    image_index = 0
}

if(!place_meeting(x,y+1,obj_solid))
{
    if(facing_right){sprite_index = spr_player_jump_r}
    else{sprite_index = spr_player_jump_l}
    image_speed = 10
    if (image_index == image_number-1)
    {
        image_speed = 0
    }

}

if(battery &lt;= 0)
{
    if(facing_right){sprite_index = spr_player_die_r}
    else{sprite_index = spr_player_die_l}
    image_speed = 5
    if (image_index == image_number-1)
    {        
        image_speed = 0
    }
}


//assignment
for(i=0;i&lt; ds_list_size(allslots);i++)
{
    slot_id = instance_find(obj_slot,i)
    if (slot_id != noone)
    {
        if (distance_to_point(slot_id.x,slot_id.y)&lt;128)
        {
            if(!place_meeting(x,y,obj_slot) or inventory1 == M_NONE)
            {
                draw_set_colour(c_orange)
                draw_line_width(x+16,y+16,slot_id.x,slot_id.y,3)
            }
            else
            {
                draw_set_colour(c_red)
                draw_line_width(x+16,y+16,slot_id.x,slot_id.y,3)
    
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
